using System;

namespace TetrisStack
{
    /// <summary>
    /// Estrutura que representa uma pe√ßa do jogo Tetris Stack
    /// Cont√©m o tipo da pe√ßa (formato) e um identificador √∫nico
    /// </summary>
    public struct Peca
    {
        /// <summary>
        /// Tipo da pe√ßa representado por um caractere ('I', 'O', 'T', 'L')
        /// Cada letra representa uma forma diferente de pe√ßa do Tetris
        /// </summary>
        public char tipo;
        
        /// <summary>
        /// Identificador √∫nico da pe√ßa (n√∫mero sequencial de cria√ß√£o)
        /// </summary>
        public int id;

        /// <summary>
        /// Construtor da estrutura Peca
        /// </summary>
        /// <param name="tipoPeca">Tipo da pe√ßa ('I', 'O', 'T', 'L')</param>
        /// <param name="idPeca">Identificador √∫nico da pe√ßa</param>
        public Peca(char tipoPeca, int idPeca)
        {
            tipo = tipoPeca;
            id = idPeca;
        }
    }

    /// <summary>
    /// Classe principal que implementa o sistema de fila circular para o Tetris Stack
    /// Gerencia as pe√ßas futuras do jogo usando uma estrutura de fila FIFO
    /// </summary>
    public class TetrisStack
    {
        // === ATRIBUTOS PRIVADOS ===
        
        /// <summary>
        /// Array que implementa a fila circular de pe√ßas
        /// </summary>
        private Peca[] filaPecas;
        
        /// <summary>
        /// Capacidade m√°xima da fila (n√∫mero fixo de elementos)
        /// </summary>
        private int capacidadeMaxima;
        
        /// <summary>
        /// √çndice da frente da fila (pr√≥xima pe√ßa a ser jogada)
        /// </summary>
        private int indiceFrente;
        
        /// <summary>
        /// √çndice do final da fila (onde ser√° inserida a pr√≥xima pe√ßa)
        /// </summary>
        private int indiceFinal;
        
        /// <summary>
        /// Quantidade atual de pe√ßas na fila
        /// </summary>
        private int quantidadePecas;
        
        /// <summary>
        /// Contador para gerar IDs √∫nicos para as pe√ßas
        /// </summary>
        private int proximoId;
        
        /// <summary>
        /// Array com os tipos de pe√ßas dispon√≠veis no Tetris
        /// </summary>
        private char[] tiposPecasDisponiveis = { 'I', 'O', 'T', 'L' };
        
        /// <summary>
        /// Gerador de n√∫meros aleat√≥rios para criar pe√ßas variadas
        /// </summary>
        private Random geradorAleatorio;

        
        // === CONSTRUTOR ===
        
        /// <summary>
        /// Construtor da classe TetrisStack
        /// Inicializa a fila circular com capacidade fixa e gera pe√ßas iniciais
        /// </summary>
        /// <param name="capacidade">Capacidade m√°xima da fila (padr√£o: 5)</param>
        public TetrisStack(int capacidade = 5)
        {
            // Inicializa√ß√£o dos atributos da fila circular
            capacidadeMaxima = capacidade;
            filaPecas = new Peca[capacidadeMaxima];
            indiceFrente = 0;
            indiceFinal = 0;
            quantidadePecas = 0;
            proximoId = 1;
            geradorAleatorio = new Random();
            
            // Preenche a fila com pe√ßas iniciais
            InicializarFilaComPecas();
        }

        // === M√âTODOS PRIVADOS (FUN√á√ïES AUXILIARES) ===
        
        /// <summary>
        /// Gera uma nova pe√ßa com tipo aleat√≥rio e ID √∫nico
        /// Fun√ß√£o respons√°vel pela cria√ß√£o autom√°tica de pe√ßas
        /// </summary>
        /// <returns>Nova pe√ßa gerada</returns>
        private Peca GerarNovaPeca()
        {
            // Seleciona um tipo aleat√≥rio do array de tipos dispon√≠veis
            int indiceAleatorio = geradorAleatorio.Next(tiposPecasDisponiveis.Length);
            char tipoSelecionado = tiposPecasDisponiveis[indiceAleatorio];
            
            // Cria e retorna a nova pe√ßa com ID sequencial
            return new Peca(tipoSelecionado, proximoId++);
        }

        /// <summary>
        /// Inicializa a fila preenchendo-a com pe√ßas at√© a capacidade m√°xima
        /// Garante que o jogo comece com pe√ßas dispon√≠veis para jogar
        /// </summary>
        private void InicializarFilaComPecas()
        {
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Console.WriteLine("    INICIALIZANDO FILA DE PE√áAS");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            
            // Adiciona pe√ßas at√© atingir a capacidade m√°xima
            for (int i = 0; i < capacidadeMaxima; i++)
            {
                Peca novaPeca = GerarNovaPeca();
                filaPecas[indiceFinal] = novaPeca;
                indiceFinal = (indiceFinal + 1) % capacidadeMaxima; // Movimento circular
                quantidadePecas++;
                
                Console.WriteLine($"  ‚û§ Pe√ßa {novaPeca.tipo} (ID: {novaPeca.id}) adicionada");
            }
            
            Console.WriteLine($"\n‚úì Fila inicializada com {quantidadePecas} pe√ßas");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        }

        /// <summary>
        /// Verifica se a fila est√° vazia
        /// </summary>
        /// <returns>True se a fila estiver vazia, False caso contr√°rio</returns>
        private bool FilaEstaVazia()
        {
            return quantidadePecas == 0;
        }

        /// <summary>
        /// Verifica se a fila est√° cheia
        /// </summary>
        /// <returns>True se a fila estiver cheia, False caso contr√°rio</returns>
        private bool FilaEstaCheia()
        {
            return quantidadePecas == capacidadeMaxima;
        }

        
        // === M√âTODOS P√öBLICOS (OPERA√á√ïES DA FILA) ===
        
        /// <summary>
        /// Remove e retorna a pe√ßa da frente da fila (opera√ß√£o DEQUEUE)
        /// Simula o ato de "jogar" uma pe√ßa no Tetris
        /// </summary>
        /// <returns>True se a opera√ß√£o foi bem-sucedida, False se a fila estava vazia</returns>
        public bool JogarPeca()
        {
            // Valida√ß√£o: verifica se h√° pe√ßas para jogar
            if (FilaEstaVazia())
            {
                Console.WriteLine("‚ùå ERRO: N√£o h√° pe√ßas na fila para jogar!");
                Console.WriteLine("   Adicione novas pe√ßas antes de tentar jogar.");
                return false;
            }

            // Remove a pe√ßa da frente da fila
            Peca pecaJogada = filaPecas[indiceFrente];
            indiceFrente = (indiceFrente + 1) % capacidadeMaxima; // Movimento circular
            quantidadePecas--;

            // Exibe informa√ß√µes da pe√ßa jogada
            Console.WriteLine("üéÆ PE√áA JOGADA COM SUCESSO!");
            Console.WriteLine($"   ‚û§ Tipo: {pecaJogada.tipo}");
            Console.WriteLine($"   ‚û§ ID: {pecaJogada.id}");
            
            // Adiciona automaticamente uma nova pe√ßa para manter o fluxo do jogo
            if (!FilaEstaCheia())
            {
                AdicionarNovaPecaAutomaticamente();
            }
            
            return true;
        }

        /// <summary>
        /// Adiciona uma nova pe√ßa ao final da fila (opera√ß√£o ENQUEUE)
        /// Permite ao jogador inserir novas pe√ßas na fila
        /// </summary>
        /// <returns>True se a opera√ß√£o foi bem-sucedida, False se a fila estava cheia</returns>
        public bool InserirNovaPeca()
        {
            // Valida√ß√£o: verifica se h√° espa√ßo na fila
            if (FilaEstaCheia())
            {
                Console.WriteLine("‚ùå ERRO: Fila est√° cheia!");
                Console.WriteLine($"   Capacidade m√°xima: {capacidadeMaxima} pe√ßas");
                Console.WriteLine("   Jogue algumas pe√ßas antes de adicionar novas.");
                return false;
            }

            // Gera e adiciona nova pe√ßa
            Peca novaPeca = GerarNovaPeca();
            filaPecas[indiceFinal] = novaPeca;
            indiceFinal = (indiceFinal + 1) % capacidadeMaxima; // Movimento circular
            quantidadePecas++;

            // Confirma a inser√ß√£o
            Console.WriteLine("‚úÖ NOVA PE√áA ADICIONADA!");
            Console.WriteLine($"   ‚û§ Tipo: {novaPeca.tipo}");
            Console.WriteLine($"   ‚û§ ID: {novaPeca.id}");
            Console.WriteLine($"   ‚û§ Posi√ß√£o na fila: {quantidadePecas}");
            
            return true;
        }

        /// <summary>
        /// Adiciona automaticamente uma nova pe√ßa (usado ap√≥s jogar uma pe√ßa)
        /// Mant√©m o fluxo cont√≠nuo do jogo
        /// </summary>
        private void AdicionarNovaPecaAutomaticamente()
        {
            Peca novaPeca = GerarNovaPeca();
            filaPecas[indiceFinal] = novaPeca;
            indiceFinal = (indiceFinal + 1) % capacidadeMaxima;
            quantidadePecas++;
            
            Console.WriteLine($"üîÑ Nova pe√ßa gerada automaticamente: {novaPeca.tipo} (ID: {novaPeca.id})");
        }

        /// <summary>
        /// Remove uma pe√ßa espec√≠fica da fila mantendo a ordem das demais pe√ßas
        /// Permite remover uma pe√ßa por ID ou posi√ß√£o na fila
        /// </summary>
        /// <returns>True se a remo√ß√£o foi bem-sucedida, False caso contr√°rio</returns>
        public bool RemoverPecaEspecifica()
        {
            // Valida√ß√£o: verifica se h√° pe√ßas na fila
            if (FilaEstaVazia())
            {
                Console.WriteLine("‚ùå ERRO: N√£o h√° pe√ßas na fila para remover!");
                return false;
            }

            // Exibe as pe√ßas dispon√≠veis
            ExibirPecasParaRemocao();
            
            Console.Write("\nüéØ Digite o ID da pe√ßa que deseja remover: ");
            string entrada = Console.ReadLine();
            
            // Valida a entrada do usu√°rio
            if (!int.TryParse(entrada, out int idParaRemover))
            {
                Console.WriteLine("‚ùå ERRO: Digite um n√∫mero v√°lido!");
                return false;
            }

            // Procura a pe√ßa com o ID especificado
            int posicaoParaRemover = -1;
            int indiceAtual = indiceFrente;
            
            for (int i = 0; i < quantidadePecas; i++)
            {
                if (filaPecas[indiceAtual].id == idParaRemover)
                {
                    posicaoParaRemover = i;
                    break;
                }
                indiceAtual = (indiceAtual + 1) % capacidadeMaxima;
            }

            // Verifica se a pe√ßa foi encontrada
            if (posicaoParaRemover == -1)
            {
                Console.WriteLine($"‚ùå ERRO: Pe√ßa com ID {idParaRemover} n√£o encontrada na fila!");
                return false;
            }

            // Executa a remo√ß√£o
            Peca pecaRemovida = RemoverPecaNaPosicao(posicaoParaRemover);
            
            // Confirma a remo√ß√£o
            Console.WriteLine("üóëÔ∏è  PE√áA REMOVIDA COM SUCESSO!");
            Console.WriteLine($"   ‚û§ Tipo: {pecaRemovida.tipo}");
            Console.WriteLine($"   ‚û§ ID: {pecaRemovida.id}");
            Console.WriteLine($"   ‚û§ Posi√ß√£o removida: {posicaoParaRemover + 1}");
            
            return true;
        }

        /// <summary>
        /// Exibe as pe√ßas dispon√≠veis para remo√ß√£o de forma organizada
        /// </summary>
        private void ExibirPecasParaRemocao()
        {
            Console.WriteLine("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ         PE√áAS DISPON√çVEIS               ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            
            int indiceAtual = indiceFrente;
            for (int posicao = 1; posicao <= quantidadePecas; posicao++)
            {
                Peca pecaAtual = filaPecas[indiceAtual];
                string marcador = (posicao == 1) ? "üëâ" : "  ";
                
                Console.WriteLine($"‚îÇ {marcador} {posicao,2}. Pe√ßa {pecaAtual.tipo} (ID: {pecaAtual.id,3})       ‚îÇ");
                indiceAtual = (indiceAtual + 1) % capacidadeMaxima;
            }
            
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        }

        /// <summary>
        /// Remove a pe√ßa na posi√ß√£o especificada e reorganiza a fila mantendo a ordem
        /// Implementa o algoritmo de remo√ß√£o com deslocamento de elementos
        /// </summary>
        /// <param name="posicao">Posi√ß√£o da pe√ßa a ser removida (0-indexada)</param>
        /// <returns>A pe√ßa que foi removida</returns>
        private Peca RemoverPecaNaPosicao(int posicao)
        {
            // Calcula o √≠ndice real da pe√ßa a ser removida
            int indiceParaRemover = (indiceFrente + posicao) % capacidadeMaxima;
            Peca pecaRemovida = filaPecas[indiceParaRemover];

            // Desloca todas as pe√ßas ap√≥s a posi√ß√£o removida para preencher o espa√ßo
            for (int i = posicao; i < quantidadePecas - 1; i++)
            {
                int indiceAtual = (indiceFrente + i) % capacidadeMaxima;
                int proximoIndice = (indiceFrente + i + 1) % capacidadeMaxima;
                
                // Move a pr√≥xima pe√ßa para a posi√ß√£o atual
                filaPecas[indiceAtual] = filaPecas[proximoIndice];
            }

            // Atualiza os ponteiros da fila
            quantidadePecas--;
            indiceFinal = (indiceFinal - 1 + capacidadeMaxima) % capacidadeMaxima;

            return pecaRemovida;
        }

        
        /// <summary>
        /// Exibe o estado atual da fila de forma organizada e clara
        /// Mostra todas as pe√ßas da frente para o final da fila
        /// </summary>
        public void ExibirEstadoDaFila()
        {
            Console.WriteLine("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë           ESTADO DA FILA              ‚ïë");
            Console.WriteLine("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            
            // Exibe informa√ß√µes gerais da fila
            Console.WriteLine($"‚ïë Pe√ßas na fila: {quantidadePecas,2}/{capacidadeMaxima,-2}                 ‚ïë");
            Console.WriteLine($"‚ïë Pr√≥ximo ID: {proximoId,7}                    ‚ïë");
            
            // Verifica se a fila est√° vazia
            if (FilaEstaVazia())
            {
                Console.WriteLine("‚ïë                                       ‚ïë");
                Console.WriteLine("‚ïë          üö´ FILA VAZIA                ‚ïë");
                Console.WriteLine("‚ïë     Adicione pe√ßas para come√ßar!      ‚ïë");
                Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
                return;
            }

            Console.WriteLine("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            Console.WriteLine("‚ïë PE√áAS (da frente ‚Üí final):            ‚ïë");
            Console.WriteLine("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            
            // Percorre a fila circular do in√≠cio ao fim
            int indiceAtual = indiceFrente;
            for (int posicao = 1; posicao <= quantidadePecas; posicao++)
            {
                Peca pecaAtual = filaPecas[indiceAtual];
                string marcador = (posicao == 1) ? "üëâ" : "  "; // Marca a pr√≥xima pe√ßa
                
                Console.WriteLine($"‚ïë {marcador} {posicao,2}. Pe√ßa {pecaAtual.tipo} (ID: {pecaAtual.id,3})          ‚ïë");
                
                // Move para o pr√≥ximo √≠ndice na fila circular
                indiceAtual = (indiceAtual + 1) % capacidadeMaxima;
            }
            
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
        }

        // === M√âTODO PRINCIPAL DO PROGRAMA ===
        
        /// <summary>
        /// Executa o loop principal do jogo com menu interativo
        /// Controla o fluxo de execu√ß√£o e intera√ß√£o com o usu√°rio
        /// </summary>
        public void ExecutarJogo()
        {
            // Cabe√ßalho inicial do jogo
            Console.Clear();
            ExibirCabecalhoJogo();
            
            // Exibe estado inicial da fila
            ExibirEstadoDaFila();
            
            // Loop principal do menu
            bool jogoAtivo = true;
            while (jogoAtivo)
            {
                // Exibe op√ß√µes do menu
                ExibirMenuPrincipal();
                
                // L√™ a escolha do usu√°rio
                string opcaoEscolhida = Console.ReadLine();
                
                // Processa a op√ß√£o escolhida
                jogoAtivo = ProcessarOpcaoMenu(opcaoEscolhida);
                
                // Pausa para o usu√°rio ler as informa√ß√µes
                if (jogoAtivo)
                {
                    Console.WriteLine("\n‚è∏Ô∏è  Pressione qualquer tecla para continuar...");
                    Console.ReadKey();
                    Console.Clear();
                }
            }
        }

        /// <summary>
        /// Exibe o cabe√ßalho decorativo do jogo
        /// </summary>
        private void ExibirCabecalhoJogo()
        {
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïë            üéÆ TETRIS STACK üéÆ                     ‚ïë");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïë          Desenvolvido por ByteBros                ‚ïë");
            Console.WriteLine("‚ïë     Sistema de Fila Circular para Pe√ßas          ‚ïë");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
        }

        
        /// <summary>
        /// Exibe o menu principal com as op√ß√µes dispon√≠veis
        /// Interface simples e clara para o usu√°rio
        /// </summary>
        private void ExibirMenuPrincipal()
        {
            Console.WriteLine("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ              MENU PRINCIPAL             ‚îÇ");
            Console.WriteLine("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
            Console.WriteLine("‚îÇ                                         ‚îÇ");
            Console.WriteLine("‚îÇ  1Ô∏è‚É£  Visualizar fila atual              ‚îÇ");
            Console.WriteLine("‚îÇ  2Ô∏è‚É£  Jogar pe√ßa (remover da frente)     ‚îÇ");
            Console.WriteLine("‚îÇ  3Ô∏è‚É£  Inserir nova pe√ßa                  ‚îÇ");
            Console.WriteLine("‚îÇ  4Ô∏è‚É£  Remover pe√ßa espec√≠fica            ‚îÇ");
            Console.WriteLine("‚îÇ  5Ô∏è‚É£  Sair do jogo                       ‚îÇ");
            Console.WriteLine("‚îÇ                                         ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
            Console.Write("\nüéØ Digite sua escolha (1-5): ");
        }

        /// <summary>
        /// Processa a op√ß√£o escolhida pelo usu√°rio no menu
        /// Implementa a l√≥gica de controle de fluxo do programa
        /// </summary>
        /// <param name="opcao">Op√ß√£o digitada pelo usu√°rio</param>
        /// <returns>True se o jogo deve continuar, False para sair</returns>
        private bool ProcessarOpcaoMenu(string opcao)
        {
            Console.WriteLine(); // Linha em branco para organiza√ß√£o
            
            // Utiliza operadores condicionais para processar cada op√ß√£o
            switch (opcao)
            {
                case "1":
                    // Op√ß√£o 1: Visualizar estado da fila
                    ExibirEstadoDaFila();
                    break;
                    
                case "2":
                    // Op√ß√£o 2: Jogar uma pe√ßa (opera√ß√£o dequeue)
                    Console.WriteLine("üéÆ JOGANDO PE√áA...\n");
                    bool sucessoJogar = JogarPeca();
                    
                    // Exibe estado atualizado ap√≥s jogar
                    if (sucessoJogar)
                    {
                        Console.WriteLine();
                        ExibirEstadoDaFila();
                    }
                    break;
                    
                case "3":
                    // Op√ß√£o 3: Inserir nova pe√ßa (opera√ß√£o enqueue)
                    Console.WriteLine("‚ûï INSERINDO NOVA PE√áA...\n");
                    bool sucessoInserir = InserirNovaPeca();
                    
                    // Exibe estado atualizado ap√≥s inserir
                    if (sucessoInserir)
                    {
                        Console.WriteLine();
                        ExibirEstadoDaFila();
                    }
                    break;
                    
                case "4":
                    // Op√ß√£o 4: Remover pe√ßa espec√≠fica
                    Console.WriteLine("üóëÔ∏è  REMOVENDO PE√áA ESPEC√çFICA...\n");
                    bool sucessoRemover = RemoverPecaEspecifica();
                    
                    // Exibe estado atualizado ap√≥s remover
                    if (sucessoRemover)
                    {
                        Console.WriteLine();
                        ExibirEstadoDaFila();
                    }
                    break;
                    
                case "5":
                    // Op√ß√£o 5: Sair do jogo
                    ExibirMensagemDespedida();
                    return false; // Encerra o loop do jogo
                    
                default:
                    // Op√ß√£o inv√°lida: exibe mensagem de erro
                    Console.WriteLine("‚ùå OP√á√ÉO INV√ÅLIDA!");
                    Console.WriteLine("   Por favor, digite um n√∫mero entre 1 e 5.");
                    break;
            }
            
            return true; // Continua o jogo para todas as op√ß√µes exceto sair
        }

        /// <summary>
        /// Exibe mensagem de despedida ao sair do jogo
        /// </summary>
        private void ExibirMensagemDespedida()
        {
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïë            üëã OBRIGADO POR JOGAR!                 ‚ïë");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïë              TETRIS STACK - ByteBros              ‚ïë");
            Console.WriteLine("‚ïë         Aprendendo programa√ß√£o com divers√£o!     ‚ïë");
            Console.WriteLine("‚ïë                                                   ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        }

        // === M√âTODO MAIN (PONTO DE ENTRADA DO PROGRAMA) ===
        
        /// <summary>
        /// M√©todo principal que inicia a execu√ß√£o do programa
        /// Cria uma inst√¢ncia do jogo e executa o loop principal
        /// </summary>
        /// <param name="args">Argumentos da linha de comando (n√£o utilizados)</param>
        static void Main(string[] args)
        {
            // Cria uma nova inst√¢ncia do jogo com capacidade padr√£o (5 pe√ßas)
            TetrisStack jogo = new TetrisStack();
            
            // Inicia a execu√ß√£o do jogo
            jogo.ExecutarJogo();
        }
    }
}